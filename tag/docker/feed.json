{
    "version": "https://jsonfeed.org/version/1",
    "title": "ネオンノワール • All posts by \"docker\" tag",
    "description": "NeonNoir ブログ",
    "home_page_url": "https://blog.neonnoir.link",
    "items": [
        {
            "id": "https://blog.neonnoir.link/2025/07/22/0_100/20_Docker%E5%9F%BA%E7%A1%80/",
            "url": "https://blog.neonnoir.link/2025/07/22/0_100/20_Docker%E5%9F%BA%E7%A1%80/",
            "title": "Docker",
            "date_published": "2025-07-22T09:33:59.000Z",
            "content_html": "<p>DockerHub: <a href=\"https://hub.docker.com/\">https://hub.docker.com/</a></p>\n<h1 id=\"配置\"><a class=\"anchor\" href=\"#配置\">#</a> 配置</h1>\n<p>安装 Docker</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://get.docker.com <span class=\"token parameter variable\">-o</span> install-docker.sh</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">sh</span> install-docker.sh</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 或者</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">sudo</span> <span class=\"token function\">curl</span> <span class=\"token parameter variable\">-fsSL</span> https://get.docker.com<span class=\"token operator\">|</span> <span class=\"token function\">bash</span> <span class=\"token parameter variable\">-s</span> <span class=\"token function\">docker</span> <span class=\"token parameter variable\">--mirror</span> Aliyun</pre></td></tr></table></figure><p>启动 Docker</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">sudo</span> systemctl start <span class=\"token function\">docker</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">sudo</span> systemctl <span class=\"token builtin class-name\">enable</span> <span class=\"token function\">docker</span></pre></td></tr></table></figure><h1 id=\"镜像\"><a class=\"anchor\" href=\"#镜像\">#</a> 镜像</h1>\n<h2 id=\"拉取镜像\"><a class=\"anchor\" href=\"#拉取镜像\">#</a> 拉取镜像</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 完整格式</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> pull docker.io/library/nginx:latest</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 若是官网渠道下的镜像则可省略</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> pull library/nginx:latest</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> pull nginx:latest</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># latest 为版本号 不填则默认最新版本</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">docker</span> pull nginx</pre></td></tr></table></figure><blockquote>\n<p><code>docker.io/library/</code>  为 docker 官方的公共仓库 library 可省略</p>\n</blockquote>\n<h2 id=\"管理镜像\"><a class=\"anchor\" href=\"#管理镜像\">#</a> 管理镜像</h2>\n<ul>\n<li>docker images                          : 列出本地存储的所有镜像</li>\n<li>docker rmi (IMAGE ID)                  : 删除镜像</li>\n<li>docker ps                              : 列出当前正在运行的容器</li>\n<li>docker rm (CONTAINER ID 或 NAMES)      : 删除 (运行) 容器，可选参数 <code>-f</code>  强制删除容器</li>\n<li>docker restart (CONTAINER ID 或 NAMES) : 重启容器</li>\n<li>docker stop (CONTAINER ID 或 NAMES)    : 停止已启动的容器</li>\n<li>docker start (CONTAINER ID 或 NAMES)   : 启动已停止的容器</li>\n</ul>\n<blockquote>\n<p>对于已停止的容器而言，需要通过  <code>docker ps -a</code>  查看所有容器 (包括停止与开启)</p>\n</blockquote>\n<h2 id=\"镜像网络\"><a class=\"anchor\" href=\"#镜像网络\">#</a> 镜像网络</h2>\n<p>用于容器之间的通信，容器间可使用 NAMES 代替 IP 地址</p>\n<ul>\n<li>docker network ls                               : 列出所有网络</li>\n<li>docker network create (network)                 : 创建一个新的网络 (Bridge 网络)</li>\n<li>docker network rm (network)                     : 删除指定的网络</li>\n<li>docker network connect (network) (container)    : 连接容器到网络</li>\n<li>docker network disconnect (network) (container) : 断开容器与网络的连接</li>\n</ul>\n<h1 id=\"容器\"><a class=\"anchor\" href=\"#容器\">#</a> 容器</h1>\n<h2 id=\"运行容器\"><a class=\"anchor\" href=\"#运行容器\">#</a> 运行容器</h2>\n<p>docker run nginx : 启动容器并运行命令</p>\n<blockquote>\n<p>若不存在镜像，则 run 命令会先拉取镜像再启动新的容器</p>\n</blockquote>\n<p>常用参数:</p>\n<ul>\n<li>-d                            : 后台运行容器并返回容器 ID</li>\n<li>-p (host_port:container_port) : 端口映射 宿主机端口：容器内端口；将本地端口映射到容器端口</li>\n<li>-v (host_dir:container_dir)   : 挂载卷 宿主机目录：容器内目录；将主机目录挂载到容器目录</li>\n<li>-e (ENVIRONMENT=value)        : 设置环境变量</li>\n<li>-it                           : 交互式运行容器，即进入容器内部命令行</li>\n<li>--name (docker_name)          : 设置容器名称</li>\n<li>--rm                          : 容器停止后自动删除容器</li>\n<li>--network (网络模式 或 连接网络)     : 指定容器的网络模式 ；默认 Bridge 模式</li>\n<li>--restart [always、unless-stopped] : 容器的重启策略</li>\n</ul>\n<blockquote>\n<p>always : 容器停止就立刻重启 ；unless-stopped : 除手动停止的容器外，容器停止就立刻重启</p>\n</blockquote>\n<h2 id=\"容器内管理\"><a class=\"anchor\" href=\"#容器内管理\">#</a> 容器内管理</h2>\n<p>docker exec [OPTIONS] (CONTAINER ID 或 NAMES) (COMMAND) : 于运行中的容器内执行命令</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 容器内执行 LinuxShell</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> my_container <span class=\"token function\">ps</span> <span class=\"token parameter variable\">-ef</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 参数 `-it` 可在容器里启动交互式的 Shell (指定 /bin/bash)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> <span class=\"token builtin class-name\">exec</span> <span class=\"token parameter variable\">-it</span> my_container /bin/sh</pre></td></tr></table></figure><h1 id=\"制作\"><a class=\"anchor\" href=\"#制作\">#</a> 制作</h1>\n<h2 id=\"配置文件\"><a class=\"anchor\" href=\"#配置文件\">#</a> 配置文件</h2>\n<p>新建  <code>Dockerfile</code>  文件，这是一个用来构建镜像的文本文件<br />\n常用指令：</p>\n<ul>\n<li>FROM (nginx:latest)                    : 指定基础镜像，以基础镜像为模板构建 (例如 Python)</li>\n<li>WORKDIR (/Directory)                   : 设置指令工作目录</li>\n<li>COPY (当前目录 工作目录)                 : 复制文件或目录到镜像</li>\n<li>RUN (ShellCommand)                     : <strong>构建镜像过程中</strong>执行命令，执行终端 Shell 命令</li>\n<li>ENV (key1=value1 key2=value2)          : 设置环境变量</li>\n<li>EXPOSE (8080)                          : 声明容器运行时监听的端口；实际端口以创建容器 <code>-p</code>  参数为主</li>\n<li>CMD ([&quot;可执行文件或命令&quot;,&quot;...&quot;])        : <strong>容器创建时</strong>的默认命令；命令可以被其他命令覆盖</li>\n<li>ENTRYPOINT ([&quot;可执行文件或命令&quot;,&quot;...&quot;]) ： <strong>容器创建时</strong>的主要命令；命令不会被覆盖，且一定会执行</li>\n</ul>\n<pre><code class=\"language-Dockerfile\">FROM python:3.13-slim\n# 设置工作目录\nWORKDIR /app\n# 复制 当前目录 至 当前工作目录 /app下\nCOPY . .\n\nRUN pip install -r requirements.txt\n\nENTRYPOINT [&quot;python3&quot;,&quot;main.py&quot;]\n</code></pre>\n<h2 id=\"推送镜像\"><a class=\"anchor\" href=\"#推送镜像\">#</a> 推送镜像</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 登录 DockerHub</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> login</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 参数 `-t` 指定镜像名称；若不推送，则 username 可省略；`.` 表示当前目录下</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">docker</span> build <span class=\"token parameter variable\">-t</span> <span class=\"token punctuation\">(</span>username/docker_name:latest<span class=\"token punctuation\">)</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token comment\"># 推送镜像</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token function\">docker</span> push <span class=\"token punctuation\">(</span>username/docker_name:latest<span class=\"token punctuation\">)</span></pre></td></tr></table></figure><h1 id=\"docker-compose\"><a class=\"anchor\" href=\"#docker-compose\">#</a> Docker Compose</h1>\n<h2 id=\"格式\"><a class=\"anchor\" href=\"#格式\">#</a> 格式</h2>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">docker</span> network create docker_network</pre></td></tr><tr><td data-num=\"2\"></td><td><pre></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token parameter variable\">--name</span> docker_name_1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">ENVIRONMENT_1</span><span class=\"token operator\">=</span>value_1 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token parameter variable\">-e</span> <span class=\"token assign-left variable\">ENVIRONMENT_2</span><span class=\"token operator\">=</span>value_2 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token parameter variable\">-v</span> /my/data:/data <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>image_1:latest</pre></td></tr><tr><td data-num=\"9\"></td><td><pre></pre></td></tr><tr><td data-num=\"10\"></td><td><pre><span class=\"token function\">docker</span> run <span class=\"token parameter variable\">-d</span> <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre><span class=\"token parameter variable\">--name</span> docker_name_2 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token parameter variable\">-p</span> <span class=\"token number\">8099</span>:8099 <span class=\"token punctuation\">\\</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>image_2</pre></td></tr></table></figure><p>其对应的 Compose 文件为:</p>\n<blockquote>\n<p>docker-compose.yml</p>\n</blockquote>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 自动创建子网络</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">services</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>    <span class=\"token key atrule\">docker_name_1</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> image_1<span class=\"token punctuation\">:</span>lates</pre></td></tr><tr><td data-num=\"5\"></td><td><pre>        <span class=\"token key atrule\">environment</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>            <span class=\"token key atrule\">ENVIRONMENT_1</span><span class=\"token punctuation\">:</span> value_1</pre></td></tr><tr><td data-num=\"7\"></td><td><pre>            <span class=\"token key atrule\">ENVIRONMENT_2</span><span class=\"token punctuation\">:</span> value_2</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>        <span class=\"token key atrule\">volumes</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>            <span class=\"token punctuation\">-</span> /my/data<span class=\"token punctuation\">:</span>/data</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>            </pre></td></tr><tr><td data-num=\"11\"></td><td><pre>    <span class=\"token key atrule\">docker_name_2</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>        <span class=\"token key atrule\">image</span><span class=\"token punctuation\">:</span> image_2</pre></td></tr><tr><td data-num=\"13\"></td><td><pre>        <span class=\"token key atrule\">ports</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>            <span class=\"token punctuation\">-</span> 8099<span class=\"token punctuation\">:</span><span class=\"token number\">8099</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>        <span class=\"token comment\"># 先启动 `docker_name_1`, 再启动 `docker_name_2`</span></pre></td></tr><tr><td data-num=\"16\"></td><td><pre>        <span class=\"token key atrule\">depends_on</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>            <span class=\"token punctuation\">-</span> docker_name_1</pre></td></tr></table></figure><blockquote>\n<p>小技巧：可用 AI 进行解析转换</p>\n</blockquote>\n<h2 id=\"运行\"><a class=\"anchor\" href=\"#运行\">#</a> 运行</h2>\n<p>启动项目</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 参数 `-d` 表示后台运行</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> compose up <span class=\"token parameter variable\">-d</span></pre></td></tr></table></figure><p>关闭项目</p>\n<figure class=\"highlight shell\"><figcaption data-lang=\"Bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 停止并删除容器</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">docker</span> compose down</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># 停止容器 但不删除</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">docker</span> compose stop</pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token comment\"># 启动停止的容器</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token function\">docker</span> compose start</pre></td></tr></table></figure><blockquote>\n<p>参数  <code>-f File.yml</code>  可指定 Compose 配置文件；默认识别 docker-compose.yml 文件</p>\n</blockquote>\n",
            "tags": [
                "Notes",
                "Docker"
            ]
        }
    ]
}