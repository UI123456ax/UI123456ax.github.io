{
    "version": "https://jsonfeed.org/version/1",
    "title": "ほしづきよ • All posts by \"配置\" tag",
    "description": "星月夜 ブログ",
    "home_page_url": "https://ui123456ax.github.io",
    "items": [
        {
            "id": "https://ui123456ax.github.io/2024/09/16/0_100/16_GitHub%E8%AE%BE%E7%BD%AE%E5%8F%8C%E8%B4%A6%E5%8F%B7%E4%B8%8A%E4%BC%A0/",
            "url": "https://ui123456ax.github.io/2024/09/16/0_100/16_GitHub%E8%AE%BE%E7%BD%AE%E5%8F%8C%E8%B4%A6%E5%8F%B7%E4%B8%8A%E4%BC%A0/",
            "title": "GitHub配置多账号git上传",
            "date_published": "2024-09-16T01:52:32.000Z",
            "content_html": "<h1 id=\"前言\"><a class=\"markdownIt-Anchor\" href=\"#前言\">#</a> 前言</h1>\n<p>记录一次关于 Github 多账号 git 的配置<br>\n将仓库内容上传 <code>AccountA</code>  的同时上传到我的另一个账号 <code>AccountB</code></p>\n<h1 id=\"流程\"><a class=\"markdownIt-Anchor\" href=\"#流程\">#</a> 流程</h1>\n<h2 id=\"生成密钥\"><a class=\"markdownIt-Anchor\" href=\"#生成密钥\">#</a> 生成密钥</h2>\n<ol>\n<li>生成新的 SSH 密钥对（假设新密钥对的名称为 <code>id_rsa_b</code> ）</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>ssh-keygen <span class=\"token parameter variable\">-t</span> ed25519 <span class=\"token parameter variable\">-C</span> <span class=\"token string\">\"your_email@example.com\"</span> <span class=\"token parameter variable\">-f</span> ~/.ssh/id_rsa_b</pre></td></tr></table></figure><ol start=\"2\">\n<li>将新生成的公钥添加到 GitHub 账号 B (AccountB) 的 SSH 密钥列表中</li>\n</ol>\n<ul>\n<li>打开密钥文件 (C:/Users/your_name/.ssh)</li>\n</ul>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">cat</span> ~/.ssh/id_rsa_b.pub</pre></td></tr></table></figure><blockquote>\n<p>将里面的内容全部复制</p>\n</blockquote>\n<ul>\n<li>登录到 GitHub 账号 B，进入 <code>“Settings” -&gt; “SSH and GPG keys” -&gt; “New SSH key”</code> ，将公钥粘贴进去并保存</li>\n</ul>\n<h2 id=\"配置本地git以使用新的ssh密钥对\"><a class=\"markdownIt-Anchor\" href=\"#配置本地git以使用新的ssh密钥对\">#</a> 配置本地 Git 以使用新的 SSH 密钥对</h2>\n<p>在本地创建一个配置文件（例如 config），在其中添加多个账号的 SSH 配置信息。每个账号的配置信息应该以 Host 开头，后面跟着对应的域名和密钥路径</p>\n<ol>\n<li>创建 <code>config</code>  配置文件</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">touch</span> ~/.ssh/config</pre></td></tr></table></figure><blockquote>\n<p>无需后缀</p>\n</blockquote>\n<ol start=\"2\">\n<li><code>config</code>  文件内容</li>\n</ol>\n<pre><code># Account A\nHost github.com-AccountA\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_a\n\n# Account B\nHost github.com-AccountB\n    HostName github.com\n    User git\n    IdentityFile ~/.ssh/id_rsa_b\n</code></pre>\n<blockquote>\n<p><code>Account-B</code>  为你要切换时使用的账号名称</p>\n</blockquote>\n<h2 id=\"尝试添加git仓库\"><a class=\"markdownIt-Anchor\" href=\"#尝试添加git仓库\">#</a> 尝试添加 git 仓库</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> config user.name <span class=\"token string\">'AccountB'</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> config user.email <span class=\"token string\">'AccountB@mail.com'</span></pre></td></tr></table></figure><figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Switch to account A</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> remote set-url origin git@github.com-AccountA:usernameA/repo.git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># Switch to account B</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> remote set-url origin git@github.com-AccountB:usernameB/repo.git</pre></td></tr></table></figure><blockquote>\n<p><code>AccountB</code>  替换为你实际要切换到的账号名<br>\n <code>usernameB</code>  替换为该账号下的用户名<br>\n <code>repo</code>  替换为你要切换到的仓库名</p>\n</blockquote>\n<p>最后验证远程仓库是否已成功添加</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 本地仓库情况</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token parameter variable\">-v</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 全局登录情况</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">ssh</span> <span class=\"token parameter variable\">-T</span> git@github.com-AccountB.com</pre></td></tr></table></figure><blockquote>\n<p>显示所有已添加的远程仓库及其对应的 URL</p>\n</blockquote>\n<h2 id=\"git-push\"><a class=\"markdownIt-Anchor\" href=\"#git-push\">#</a> git push</h2>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> init</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> <span class=\"token function\">add</span> <span class=\"token builtin class-name\">.</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">git</span> commit <span class=\"token parameter variable\">-am</span> <span class=\"token string\">\"first commit\"</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@AccountB:usernameB/repo.git</pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token function\">git</span> push <span class=\"token parameter variable\">-u</span> origin master</pre></td></tr></table></figure><h1 id=\"遇到的问题\"><a class=\"markdownIt-Anchor\" href=\"#遇到的问题\">#</a> 遇到的问题</h1>\n<p><code>error: remote origin already exists</code> <br>\n 这个错误表示远程仓库 “origin” 已经存在。可能原因有：</p>\n<ul>\n<li>没有成功配置 SSH 到 GitHub 账号上</li>\n<li>已经添加过该仓库</li>\n</ul>\n<h2 id=\"解决方法\"><a class=\"markdownIt-Anchor\" href=\"#解决方法\">#</a> 解决方法</h2>\n<ol>\n<li>重新配置。<strong>请确保每一步骤准确，文件配置恰当</strong></li>\n<li>删除并重新添加远程仓库</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> remote remove origin</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">git</span> remote <span class=\"token function\">add</span> origin git@github.com-AccountB:usernameB/repo.git</pre></td></tr></table></figure>",
            "tags": [
                "配置",
                "github"
            ]
        },
        {
            "id": "https://ui123456ax.github.io/2024/07/30/0_100/13_Android%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91/",
            "url": "https://ui123456ax.github.io/2024/07/30/0_100/13_Android%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91/",
            "title": "Android抓包工具无法正常上网",
            "date_published": "2024-07-30T01:28:48.000Z",
            "content_html": "<h1 id=\"问题\"><a class=\"markdownIt-Anchor\" href=\"#问题\">#</a> 问题</h1>\n<p>连上抓包工具之后无法连接网络，网站提示证书安全问题、App 无法正常使用等。通常是 SSL 返回时证书的问题:<br>\nAndroid 系统将 CA 证书又分为两种， <code>用户CA证书</code> 和 <code>系统CA证书</code> 。<br>\n顾明思议，用户 CA 证书是由用户自行安装的，系统 CA 证书是由系统内置的，很明显后者更加真实有效。<br>\n而我们要做的无非就是<strong>将证书导入至系统 CA 证书</strong>当中，或是<strong>绕过系统 CA 证书的检测</strong></p>\n<blockquote>\n<p>系统 CA 证书存储路径:  <code>/system/etc/security/cacerts/</code></p>\n</blockquote>\n<h1 id=\"解决\"><a class=\"markdownIt-Anchor\" href=\"#解决\">#</a> 解决</h1>\n<p>所需工具</p>\n<ul>\n<li>OpneSSL</li>\n<li>AndroidDebugBridge</li>\n<li>Xposed</li>\n<li>JustTrustMe 模块</li>\n</ul>\n<h2 id=\"导入-import\"><a class=\"markdownIt-Anchor\" href=\"#导入-import\">#</a> 导入 Import</h2>\n<h3 id=\"下载工具\"><a class=\"markdownIt-Anchor\" href=\"#下载工具\">#</a> 下载工具</h3>\n<ul>\n<li>OpenSSL 下载地址: <a href=\"https://slproweb.com/products/Win32OpenSSL.html\">https://slproweb.com/products/Win32OpenSSL.html</a></li>\n</ul>\n<blockquote>\n<p>本文使用版本 <code>Win64 OpenSSL v3.3.1</code>  下载最新版亦可</p>\n</blockquote>\n<ul>\n<li>AndroidDebugBridge 下载地址: <a href=\"https://adbdownload.com/\">https://adbdownload.com/</a></li>\n</ul>\n<blockquote>\n<p>本文使用版本 <code>R35.0.0</code>  下载最新版亦可</p>\n</blockquote>\n<p>如有需要可自行配置系统环境变量 <code>Path</code></p>\n<h3 id=\"转换证书\"><a class=\"markdownIt-Anchor\" href=\"#转换证书\">#</a> 转换证书</h3>\n<p>使用 <code>openssl</code>  将证书转为 <code>xx.0</code>  证书文件</p>\n<ol>\n<li>获取证书文件的哈希值</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cer 证书文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-inform</span> DER <span class=\"token parameter variable\">-subject_hash_old</span> <span class=\"token parameter variable\">-in</span> xxxx.cer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># pem 证书文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-inform</span> PEM <span class=\"token parameter variable\">-subject_hash_old</span> <span class=\"token parameter variable\">-in</span> xxxx.pem</pre></td></tr></table></figure><p><img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/13_/13_01.png\" alt=\"00\"></p>\n<ol>\n<li>生成 <code>.0</code>  证书文件</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cer 证书文件</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-inform</span> DER <span class=\"token parameter variable\">-text</span> <span class=\"token parameter variable\">-in</span> xxxx.cer <span class=\"token operator\">></span> 哈希值.0</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># pem 证书文件</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>openssl x509 <span class=\"token parameter variable\">-inform</span> PEM <span class=\"token parameter variable\">-text</span> <span class=\"token parameter variable\">-in</span> xxxx.pem <span class=\"token operator\">></span> 哈希值.0</pre></td></tr></table></figure><h3 id=\"导入证书\"><a class=\"markdownIt-Anchor\" href=\"#导入证书\">#</a> 导入证书</h3>\n<p>两种方法，任意即可</p>\n<ol>\n<li>\n<p>复制文件<br>\n Root 设备后，使用 MT 管理器 或 其他文件管理器 将下载的证书 <code>xx.0</code>  复制至系统 <code>/system/etc/security/cacerts/</code>  目录</p>\n</li>\n<li>\n<p>ADB 导入</p>\n</li>\n</ol>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>adb root</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>adb shell avbctl disable-verification</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>adb remount</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token comment\"># adb push 本地文件路径 Android 文件路径</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>adb push xx.0 /system/etc/security/cacerts/xx.0</pre></td></tr></table></figure><p>注意！一般 Root 之后便会开启 <code>system</code>  读写，但也有例外:<br>\n 如果是模拟器很可能是没有开启 <code>system</code>  写入，按下图开启即可 <s>被坑过 QwQ</s><br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/13_/13_01.png\" alt=\"01\" title=\"雷电模拟器9\"></p>\n<h2 id=\"绕过-bypass\"><a class=\"markdownIt-Anchor\" href=\"#绕过-bypass\">#</a> 绕过 Bypass</h2>\n<h3 id=\"下载工具-2\"><a class=\"markdownIt-Anchor\" href=\"#下载工具-2\">#</a> 下载工具</h3>\n<p>Magisk (任意即可):</p>\n<ul>\n<li>原版 (Magisk)：<a href=\"https://github.com/topjohnwu/Magisk/releases\">https://github.com/topjohnwu/Magisk/releases</a></li>\n<li>狐狸 (Kitsune Magisk)：<a href=\"https://huskydg.github.io/magisk-files/\">https://huskydg.github.io/magisk-files/</a></li>\n</ul>\n<blockquote>\n<p><code>Kitsune Magisk</code> <a href=\"https://blog.csdn.net/Ruaki/article/details/135580772\"> 下载教程</a></p>\n</blockquote>\n<p>JustTrustMe 模块下载地址: <a href=\"https://github.com/Fuzion24/JustTrustMe/releases/\">https://github.com/Fuzion24/JustTrustMe/releases/</a><br>\nXposed (任意即可):</p>\n<ul>\n<li>VirtualXposed 下载地址: <a href=\"https://virtualxposed.com/download/\">https://virtualxposed.com/download/</a></li>\n<li>LSPatch 下载地址: <a href=\"https://github.com/LSPosed/LSPatch/releases\">https://github.com/LSPosed/LSPatch/releases</a></li>\n<li>LSPosed 下载地址：<a href=\"https://github.com/LSPosed/LSPosed/releases/tag/v1.9.2\">https://github.com/LSPosed/LSPosed/releases/tag/v1.9.2</a></li>\n</ul>\n<blockquote>\n<p>本文以 <code>LSPosed + KitsuneMagisk</code>  介绍</p>\n</blockquote>\n<h3 id=\"原理\"><a class=\"markdownIt-Anchor\" href=\"#原理\">#</a> 原理</h3>\n<p>利用 Xposed + JustTrustMe 模块，绕过 SSL 证书检测</p>\n<h3 id=\"lsposed安装\"><a class=\"markdownIt-Anchor\" href=\"#lsposed安装\">#</a> LSPosed 安装</h3>\n<ol>\n<li>\n<p>在 <code>Magisk</code>  设置中将 <code>Zygisk</code>  设项打开，将设备重启即可<br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/13_/13_02.png\" alt=\"02\" title=\"Kitsune Magisk\"></p>\n</li>\n<li>\n<p>进入模块，选择从本地安装，选择 <code>LSPosed-v1.8.4-6609-zygisk-release.zip</code>  文件进行安装</p>\n</li>\n</ol>\n<blockquote>\n<p><code>LSPosed-v1.8.4-6609-zygisk-release.zip</code>  请从官网下载，记住是<strong> zygisk</strong></p>\n</blockquote>\n<ol start=\"3\">\n<li>安装 <code>LSPosed.apk</code> ，打开 LSPosed 可以看到处于激活的状态</li>\n</ol>\n<blockquote>\n<p><code>LSPosed.apk</code>  这个我也没从 Github 上找到，不过在另一个网页上找到 <a href=\"https://www.downkuai.com/android/175025.html\">下载地址</a></p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/13_/13_03.png\" alt=\"03\"></p>\n<h3 id=\"使用justtrustme模块\"><a class=\"markdownIt-Anchor\" href=\"#使用justtrustme模块\">#</a> 使用 JustTrustMe 模块</h3>\n<p>完成 LSPosed 配置后，安装 <code>TrustMeAlready.apk</code> 。在 LSPosed 模块上点击 <code>JustTrustMe</code> ，选择需要抓包的 App (小黑盒)，重新设备启动即可。<br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/13_/13_04.png\" alt=\"04\"></p>\n<hr>\n<p>此时便可愉快地抓包啦</p>\n",
            "tags": [
                "配置",
                "Android"
            ]
        },
        {
            "id": "https://ui123456ax.github.io/2024/07/10/0_100/11_BurpSuite/",
            "url": "https://ui123456ax.github.io/2024/07/10/0_100/11_BurpSuite/",
            "title": "BurpSuite使用指南",
            "date_published": "2024-07-10T06:58:50.000Z",
            "content_html": "<p>更新中～<br>\n 下载请自行上网搜索</p>\n<h1 id=\"配置\"><a class=\"markdownIt-Anchor\" href=\"#配置\">#</a> 配置</h1>\n<p>打开系统的设置页面，并在代理中手动开启并设置代理服务器<br>\n一般代理 ip 服务器为 <code>127.0.0.1</code> ，端口号为 <code>8080</code>  || 根据实际设置而定</p>\n<h2 id=\"edge浏览器\"><a class=\"markdownIt-Anchor\" href=\"#edge浏览器\">#</a> Edge 浏览器</h2>\n<ol>\n<li>\n<p>点击右上角的设置，并找到 Tools 中的 Proxy 项目<br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_01.png\" alt=\"01\"></p>\n</li>\n<li>\n<p>并在代理监听器中选择任意项导出 CA 证书，如下图<br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_02.png\" alt=\"02\"><br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_03.png\" alt=\"03\"></p>\n</li>\n<li>\n<p>找到 Edge 浏览器，并打开设置，将证书导入</p>\n</li>\n</ol>\n<blockquote>\n<p>因本人用 Edge，其他浏览器请自行搜索</p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_04.png\" alt=\"04\"></p>\n<ol start=\"4\">\n<li>并在 Edge 的快捷方式中添加如下<br>\n <code>--test-type --ignore-certificate-errors</code> <br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_05.png\" alt=\"05\"></li>\n</ol>\n<h2 id=\"抓包数据中文乱码\"><a class=\"markdownIt-Anchor\" href=\"#抓包数据中文乱码\">#</a> 抓包数据中文乱码</h2>\n<p>在设置中搜索 <code>User interface</code>  下滑更改 字体显示为 <code>宋体13pt</code>  字符集显示为 <code>UTF-8</code> <br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_06.png\" alt=\"06\"><br>\n 别忘了重启程序 w</p>\n<h2 id=\"抓包app\"><a class=\"markdownIt-Anchor\" href=\"#抓包app\">#</a> 抓包 App</h2>\n<h3 id=\"模拟器手机\"><a class=\"markdownIt-Anchor\" href=\"#模拟器手机\">#</a> 模拟器 (手机)</h3>\n<ol>\n<li>在 windows 运行 cmd 中输入 <code>ipconfig</code>  查看本地 ipv4 地址，在 Burp 设置里添加以本地 ip 的代理监听器</li>\n</ol>\n<blockquote>\n<p>我的本地 IP <code>192.168.0.113</code> ，端口号随意填 <code>8080</code></p>\n</blockquote>\n<p><img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_07.png\" alt=\"07\"><br>\n2. 打开模拟器 (手机)，输入本地 ip <code>192.168.0.113</code> ，以及端口号 <code>8080</code> <br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_08.png\" alt=\"08\"></p>\n<blockquote>\n<p>注意 此时还未能抓包，需要安装证书</p>\n</blockquote>\n<ul>\n<li>在模拟器的浏览器内输入 <code>http://burp/</code> ，下载 CA 证书 <code>cacert.der</code> ，并在文件管理器中将其改为 <code>cacert.cer</code>  然后在设置内搜索 <code>从SD卡安装</code> 安装证书<br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_09.png\" alt=\"09\"></li>\n</ul>\n<blockquote>\n<p>使用雷电 9 等模拟器安装证书时无法安装，请看下方解决方法</p>\n</blockquote>\n<ul>\n<li>在 bp 中导出当前监听器的证书 <code>s.cer</code> ，然后并把该文件拖拽至模拟器程序上，此时默认安装即可<br>\n<img loading=\"lazy\" data-src=\"https://gcore.jsdelivr.net/gh/ui123456ax/PicGo/Blog_images/11_/11_10.png\" alt=\"10\"></li>\n</ul>\n<p><strong>补充</strong>：连上抓包工具之后无法连接网络，网站提示证书安全问题、App 无法正常使用等。请看–&gt; <a href=\"https://neonnoir.us.kg/2024/07/30/0_100/13_Android%E6%8A%93%E5%8C%85%E5%B7%A5%E5%85%B7%E6%97%A0%E6%B3%95%E6%AD%A3%E5%B8%B8%E4%B8%8A%E7%BD%91/\">Android 抓包工具无法正常上网</a></p>\n<h3 id=\"本地抓包apk\"><a class=\"markdownIt-Anchor\" href=\"#本地抓包apk\">#</a> 本地抓包 Apk</h3>\n<p>主要流程：</p>\n<ul>\n<li>配置 Android 子系统–&gt; 本地安装 Apk 程序–&gt; 打开抓包工具–&gt; 即可抓取数据</li>\n</ul>\n<p>关于 win 安装 Apk 程序可以看下面的文章配置，写的很详细，非常不错</p>\n<ul>\n<li><a href=\"https://blog.csdn.net/m0_56076343/article/details/122334759\">Win11</a></li>\n<li><a href=\"https://www.bilibili.com/read/cv28566256/\">Win10</a></li>\n</ul>\n<p>安装完 apk 后，正常抓包即可 <s>这里就不再复述了</s></p>\n<h1 id=\"使用\"><a class=\"markdownIt-Anchor\" href=\"#使用\">#</a> 使用</h1>\n<p><s>暂时搁置，以后再写</s></p>\n<h1 id=\"扩展\"><a class=\"markdownIt-Anchor\" href=\"#扩展\">#</a> 扩展</h1>\n<p>扩展的获取方法</p>\n<ol>\n<li>\n<p>BApp Store<br>\nBurpSuite 扩展页面上的 <code>BAppStore</code> 。虽有丰富的扩展，但同时没点英文程度还是有点困难的</p>\n</li>\n<li>\n<p>浏览器 / Github 上搜索</p>\n</li>\n<li>\n<p><s>编写程序</s></p>\n</li>\n</ol>\n<h2 id=\"turbo-intruder\"><a class=\"markdownIt-Anchor\" href=\"#turbo-intruder\">#</a> Turbo Intruder</h2>\n<p><s>暂时搁置，以后再写</s></p>\n",
            "tags": [
                "笔记",
                "配置"
            ]
        },
        {
            "id": "https://ui123456ax.github.io/2024/05/10/0_100/09_RPGMV%E5%9C%A8IOS%E4%B8%8A%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cogg%E6%96%87%E4%BB%B6/",
            "url": "https://ui123456ax.github.io/2024/05/10/0_100/09_RPGMV%E5%9C%A8IOS%E4%B8%8A%E6%97%A0%E6%B3%95%E8%BF%90%E8%A1%8Cogg%E6%96%87%E4%BB%B6/",
            "title": "修复RPGMV在IOS上无法运行ogg文件",
            "date_published": "2024-05-10T05:48:33.000Z",
            "content_html": "<p>Q: 为什么无法在播放声音？<br>\nA: 主要问题是 IOS 中播放音频一般情况下都是使用 AVPlayer，而 ogg 文件 AVPlayer 无法播放<br>\n Q: 换一个支持的浏览器播放器内核不就可以了吗？<br>\nA: IOS 政策不允许</p>\n<h1 id=\"安装audiostream补丁\"><a class=\"markdownIt-Anchor\" href=\"#安装audiostream补丁\">#</a> 安装 <code>AudioStream</code>  补丁</h1>\n<p>链接：<a href=\"https://wwo.lanzouo.com/iC1OW1yaahzi\">https://wwo.lanzouo.com/iC1OW1yaahzi</a></p>\n<p>将以下文件导入到 <code>&lt;root&gt;/www/js/plugins</code>  文件夹下</p>\n<pre><code class=\"language-file\">`AudioStreaming.js`,\n`stbvorbis_stream.js`,\n`stbvorbis_stream_asm.js`.\n</code></pre>\n<h1 id=\"文件修改\"><a class=\"markdownIt-Anchor\" href=\"#文件修改\">#</a> 文件修改</h1>\n<p>在 <code>&lt;root&gt;/www/js/plugins.js</code> , 添加以下代码于文件中:</p>\n<pre><code>&#123;&quot;name&quot;:&quot;AudioStreaming&quot;,&quot;status&quot;:true,&quot;description&quot;:&quot;音声読み込みを高速化し、oggファイルのみを使用します。&quot;,&quot;parameters&quot;:&#123;&quot;mode&quot;:&quot;10&quot;,&quot;deleteM4a&quot;:&quot;false&quot;&#125;&#125;,\n&#123;&quot;name&quot;:&quot;stbvorbis_stream&quot;,&quot;status&quot;:false,&quot;description&quot;:&quot;&quot;,&quot;parameters&quot;:&#123;&#125;&#125;,\n&#123;&quot;name&quot;:&quot;stbvorbis_stream_asm&quot;,&quot;status&quot;:false,&quot;description&quot;:&quot;&quot;,&quot;parameters&quot;:&#123;&#125;&#125;,\n</code></pre>\n<p>其实到这里就已经大功告成了，最后只需要启动便可<br>\n补丁来源于：<a href=\"http://onsplayer.cn/info/2371\">http://onsplayer.cn/info/2371</a></p>\n",
            "tags": [
                "配置"
            ]
        },
        {
            "id": "https://ui123456ax.github.io/2023/06/24/0_100/03_Hexo%E6%B7%BB%E5%8A%A0Live2d%EF%BC%88%E7%9C%8B%E6%9D%BF%E5%A8%98%EF%BC%89/",
            "url": "https://ui123456ax.github.io/2023/06/24/0_100/03_Hexo%E6%B7%BB%E5%8A%A0Live2d%EF%BC%88%E7%9C%8B%E6%9D%BF%E5%A8%98%EF%BC%89/",
            "title": "Hexo美化 添加Live2d（看板娘）",
            "date_published": "2023-06-24T08:54:16.000Z",
            "content_html": "<h1 id=\"hexo-helper-live2d\"><a class=\"markdownIt-Anchor\" href=\"#hexo-helper-live2d\">#</a> <a href=\"https://github.com/EYHN/hexo-helper-live2d\">Hexo-helper-live2d</a> 插件安装与配置</h1>\n<p>Hexo 的官方支持看板娘，已经封装好了插件～</p>\n<blockquote>\n<p>不用折腾啦，欸真好啊</p>\n</blockquote>\n<h2 id=\"安装插件\"><a class=\"markdownIt-Anchor\" href=\"#安装插件\">#</a> 安装插件</h2>\n<p>在站点根目录下打开终端，输入以下命令</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> hexo-helper-live2d</pre></td></tr></table></figure><h2 id=\"选择并安装模型\"><a class=\"markdownIt-Anchor\" href=\"#选择并安装模型\">#</a> 选择并安装模型</h2>\n<p>以 live2d-widget-model-shizuku 模型为例</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">--save</span> live2d-widget-model-shizuku</pre></td></tr></table></figure><p>点击<a href=\"https://blog.csdn.net/wang_123_zy/article/details/87181892\">预览更多模型</a></p>\n<h2 id=\"配置live2d\"><a class=\"markdownIt-Anchor\" href=\"#配置live2d\">#</a> 配置 Live2d</h2>\n<p>站点配置文件 <code>_config.yml</code> ，新添加如下内容：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Live2D</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## https://github.com/EYHN/hexo-helper-live2d</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>live2d:</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>  enable: <span class=\"token boolean\">true</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  <span class=\"token comment\"># enable: false</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>  scriptFrom: <span class=\"token builtin class-name\">local</span> <span class=\"token comment\"># 默认</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  pluginRootPath: live2dw/ <span class=\"token comment\"># 插件在站点上的根目录 (相对路径)</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  pluginJsPath: lib/ <span class=\"token comment\"># 脚本文件相对与插件根目录路径</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>  pluginModelPath: assets/ <span class=\"token comment\"># 模型文件相对与插件根目录路径</span></pre></td></tr><tr><td data-num=\"10\"></td><td><pre>  <span class=\"token comment\"># scriptFrom: jsdelivr # jsdelivr CDN</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>  <span class=\"token comment\"># scriptFrom: unpkg # unpkg CDN</span></pre></td></tr><tr><td data-num=\"12\"></td><td><pre>  <span class=\"token comment\"># scriptFrom: https://cdn.jsdelivr.net/npm/live2d-widget@3.x/lib/L2Dwidget.min.js # 你的自定义 url</span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>  tagMode: <span class=\"token boolean\">false</span> <span class=\"token comment\"># 标签模式，是否仅替换 live2d tag 标签而非插入到所有页面中</span></pre></td></tr><tr><td data-num=\"14\"></td><td><pre>  debug: <span class=\"token boolean\">false</span> <span class=\"token comment\"># 调试，是否在控制台输出日志</span></pre></td></tr><tr><td data-num=\"15\"></td><td><pre>  model:</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>    use: live2d-widget-model-shizuku <span class=\"token comment\"># 使用的 Live2d 模型名称</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>    <span class=\"token comment\"># use: wanko # 博客根目录 /live2d_models/ 下的目录名</span></pre></td></tr><tr><td data-num=\"18\"></td><td><pre>    <span class=\"token comment\"># use: ./wives/wanko # 相对于博客根目录的路径</span></pre></td></tr><tr><td data-num=\"19\"></td><td><pre>    <span class=\"token comment\"># use: https://cdn.jsdelivr.net/npm/live2d-widget-model-wanko@1.0.5/assets/wanko.model.json # 你的自定义 url</span></pre></td></tr><tr><td data-num=\"20\"></td><td><pre>  display:</pre></td></tr><tr><td data-num=\"21\"></td><td><pre>    position: right <span class=\"token comment\">#显示位置</span></pre></td></tr><tr><td data-num=\"22\"></td><td><pre>    width: <span class=\"token number\">150</span></pre></td></tr><tr><td data-num=\"23\"></td><td><pre>    height: <span class=\"token number\">300</span></pre></td></tr><tr><td data-num=\"24\"></td><td><pre>  mobile:</pre></td></tr><tr><td data-num=\"25\"></td><td><pre>    show: <span class=\"token boolean\">true</span> <span class=\"token comment\"># 手机中是否展示</span></pre></td></tr></table></figure><p>最后输入 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>  就可以本地预览看到你的 Live2d 啦</p>\n",
            "tags": [
                "博客",
                "配置"
            ]
        }
    ]
}